    // for (int i = 0; i < height; i++ ){                                   /check if the array has been filled properly
    //     for(int j = 0; j < width; j++){
    //       cout <<  array[i][j];
    //     }
    //     cout << endl;
    // }

    // for (int i = 0; i < Letters.size(); i++) {
    //     cout << "Letter: " << Letters[i] << ", Range: " << Range[2 * i] << " to " << Range[2 * i + 1] << endl;
    // }


    // for(int i = 0; i < number_positions.size(); i++){
    //     cout << number_positions[i] << endl;
    // }


    
    int main() {
    string input = R"(26 7
U 0 10,H 15 25 
0 4 8 12 25 29 33
0 10 15 25 0 10 15 25 0 10 15 25 0 10 15 16 17 18 19 20 21 22 23 24 25 0 10 15 25 1 9 15 25 2 3 4 5 6 7 8 15 25)";
    
    string input;
    while(getline(cin, input)){
        stringstream ss(input);                                                // Get the height and the width from the first line
        string line1;
        getline(ss, line1);
        int width, height;

        stringstream line1_ss(line1);
        line1_ss >> width >> height;
        
        vector<vector<char>> array(height, vector<char>(width, ' '));          // create an empty map to place the letters and characters

        string line2;                                                          // Parse out the characters and its ranges from line 2
        getline(ss, line2);
        replace(line2.begin(), line2.end(), ',', ' ');                         // replace coma instances with space

        stringstream line2_ss(line2);
        vector<char> Letters;
        vector<int> Range;

        char letter;
        int min,max;
        
        while (line2_ss >> letter >> min >> max) {
            Letters.push_back(letter);
            Range.push_back(min);
            Range.push_back(max);
        }

        string line3;
        getline(ss, line3);

        vector<int> number_range;
        stringstream line3_ss(line3);

        int num;
        while(line3_ss >> num){
            number_range.push_back(num);
        }

        string line4;
        getline(ss, line4);
        
        vector<int> number_positions;
        stringstream line4_ss(line4);

        int pos;
        while(line4_ss >> pos){
            number_positions.push_back(pos);
        }

        decode_info(array, Letters, Range, number_range, number_positions);
        
        for (const auto row : array) {
            for (char c : row) {
                cout << c;
            }    
            cout << endl;
        }

    }

    
    return 0;
}
